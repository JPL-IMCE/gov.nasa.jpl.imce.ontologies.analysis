    $HeadURL$
#
#    $LastChangedRevision$
#    $LastChangedDate$
#
#    $LastChangedBy$
#
#    Copyright (c) 2009,2010 California Institute of Technology.
#    All rights reserved.
#

ARTIFACTS_DIR ?= artifacts
AUDITS_DIR ?= tests/audits
AUDITS_TREE ?= ../../data/Audit/export/caesar-demo
AUDITS_TEST_FILE ?= $(AUDITS_DIR)/run-audits$(XML_SUFFIX)

BACKBONE_DISJOINTS ?= Entity ReifiedObjectProperty ReifiedStructuredDataProperty StructuredDatatype
BACKBONE_PREFIX ?= http://imce.jpl.nasa.gov/backbone/

BUNDLE_CLOSURE_ABBREV = caesar-demo-bundle
BUNDLE_CLOSURE_BACKBONE_IRI = $(BACKBONE_PREFIX)imce.jpl.nasa.gov/project/caesar-demo
BUNDLE_CLOSURE_BACKBONE_ABBREV = caesar-demo-bundle-backbone
BUNDLE_CLOSURE_FILE = $(WORKFLOW)/artifacts/bundles/caesar-demo-bundle$(OWL_SUFFIX)
BUNDLE_CLOSURE_IRI = http://imce.jpl.nasa.gov/project/caesar-demo
BUNDLE_CLOSURE_FILE_IRI = file://$(BUNDLE_CLOSURE_FILE)
BUNDLE_NAME = caesar-demo-bundle

CLOSE_BUNDLE ?= $(JRUBY_CMD) $(TOOLS)/tools/close-bundle
CLOSE_BUNDLE_OPTS ?= --export

DEPENDENCIES_FILE ?= .dependencies

ENTAIL ?= $(JRUBY_CMD) $(TOOLS_DIR)/entail
ENTAIL_OPTS = --info

EMPTY_IMPORTS_FILE ?= empty-imports.yaml

ENTAILMENTS_DIR ?= $(ARTIFACTS_DIR)/entailments

EXTRACT ?= $(JRUBY_CMD) $(TOOLS_DIR)/extract-ontology
EXTRACT_OPTS ?= --host $(JENA_HOST) --port $(JENA_PORT) --dataset $(JENA_DATASET)

FUSEKI_DIR ?= /opt/jena-fuseki-0.2.7
FUSEKI_S_DELETE ?= $(FUSEKI_DIR)/s-delete
FUSEKI_S_GET ?= $(FUSEKI_DIR)/s-get
FUSEKI_S_PUT ?= $(FUSEKI_DIR)/s-put

GET_UNSATS ?= $(TOOLS_DIR)/get-unsats
GET_UNSAT_PROPS_OPTS ?= --info --get-props
GET_UNSAT_PROP_SOURCES_OPTS ?= --info --get-prop-sources
GET_UNSAT_PROP_TARGETS_OPTS ?= --info --get-prop-targets
GET_UNSAT_SUPS_OPTS ?= --info --get-sups
GET_UNSAT_FUNC_PROPS_OPTS ?= --info --get-func-props
GET_UNSAT_IRIS_OPTS ?= --info

GET_UNSAT_ROOTS ?= $(TOOLS_DIR)/get-unsat-roots
GET_UNSAT_ROOTS_OPTS ?= --info

IRI_TO_MDID ?= $(TOOLS_DIR)/iri-to-mdid
IRI_TO_MDID_OPTS ?= --info

JRUBY ?= jruby
JRUBY_CMD ?= $(JRUBY) $(JRUBY_OPTS)
JRUBY_OPTS ?= --headless -J-Xmx16384m -J-Djava.util.logging.config.file=logging.properties

LOAD_REPO ?= $(TOOLS_DIR)/load-jena
LOAD_REPO_OPTS ?= --host $(JENA_HOST) --port $(JENA_PORT) --dataset $(JENA_DATASET)

LOCATION_MAPPING_FILE ?= location-mapping.yaml

MAKE_MAKEFILE ?= $(TOOLS_DIR)/make-makefile

OWL_SUFFIX = .owl

PROJECT_BUNDLE_IRI ?= <%= PROJECT_BUNDLE_IRI = 'http://imce.jpl.nasa.gov/foundation/project/project-bundle' %>

PROVENANCE_FILE ?= $(ARTIFACTS_DIR)/OML2OTIProvenances.json

REPORTS_DIR ?= $(ARTIFACTS_DIR)/reports
REPORTS_TREE ?= ../data/Report/export/caesar-demo
REPORTS_TEST_FILE ?= $(REPORTS_DIR)/run-reports$(ZIP_SUFFIX)
RUBY ?= $(JRUBY)
RUN_AUDITS ?= $(JRUBY_CMD) $(TOOLS_DIR)/run-audits-jena
RUN_AUDITS_OPTS ?= --host $(JENA_HOST) --port $(JENA_PORT) --dataset $(JENA_DATASET)
RUN_REPORTS ?= $(JRUBY_CMD) $(TOOLS_DIR)/run-audits-jena
RUN_REPORTS_OPTS ?= --report --host $(JENA_HOST) --port $(JENA_PORT) --dataset $(JENA_DATASET)

SENTINELS_DIR ?= $(ARTIFACTS_DIR)/.sentinels

TESTS_DIR ?= tests/consistency
TOOLS_DIR ?= ../tools/tools

UNSATS_REPORT_FILE ?= tests/consistency/unsats.csv
UNSAT_PROPS_REPORT_FILE ?= tests/consistency/unsat-props.csv
UNSAT_PROP_SOURCES_REPORT_FILE ?= tests/consistency/unsat-prop-sources.csv
UNSAT_PROP_TARGETS_REPORT_FILE ?= tests/consistency/unsat-prop-targets.csv
UNSAT_SUPS_REPORT_FILE ?= tests/consistency/unsat-sups.csv
UNSAT_FUNC_PROPS_REPORT_FILE = tests/consistency/unsat-func-props.csv

UNSAT_ROOTS_REPORT_FILE = tests/consistency/unsat-roots.csv

VALIDATE_OWL ?= $(JRUBY_CMD) -J-Djava.util.logging.config.file=logging.properties $(TOOLS_DIR)/validate-owl
VALIDATE_OWL_OPTS ?= --satisfiability

VALIDATE_ROOTS_TEST_FILE ?= $(TESTS_DIR)/validate-roots$(XML_SUFFIX)
VALIDATE_ROOTS_ID ?= validate-roots

VIEW_STEM ?= imce.jpl.nasa.gov/view/

XML_SUFFIX ?= .xml

ZIP_SUFFIX ?= .zip

tmpfile = $(dir $1).$(notdir $1)

-include $(DEPENDENCIES_FILE)

# 
# load ontology metadata
#

<%

  class OMFGraph
    def initialize(iri, filename, provenance)
      @iri = iri
      @filename = filename
      @provenance = provenance
    end
    def ontology_iri
      @iri
    end
    def entailments_iri(type)
      "#{@iri}/#{type}"
    end
    attr_reader :provenance
    def ontology_file
      "#{ENV['PWD']}/$(ARTIFACTS_DIR)/#{@filename}$(OWL_SUFFIX)"
    end
    def ontology_file_iri
      'file://' + ontology_file
    end
    def entailments_file(type)
      "#{ENV['PWD']}/$(ENTAILMENTS_DIR)/#{@filename}/#{type}$(OWL_SUFFIX)"
    end
    def entailments_file_iri(type)
      'file://' + entailments_file(type)
    end
    def ontology_sentinel
      "#{ENV['PWD']}/$(SENTINELS_DIR)/#{@filename}$(OWL_SUFFIX)"
    end
    def entailments_sentinel(type)
      "#{ENV['PWD']}/$(SENTINELS_DIR)/#{@filename}/#{type}$(OWL_SUFFIX)"
    end
  end
  
  require 'json'
  require 'jgrapht-core-0.9.0.jar'

  java_import 'org.jgrapht.experimental.dag.DirectedAcyclicGraph'
  java_import 'org.jgrapht.graph.DefaultEdge'
  java_import 'org.jgrapht.alg.TransitiveClosure'

  # Constants.
  
  ENTAILMENTS = {
	'ClassEntailments' => %w{ AllSubclass },
	'PropertyEntailments' => %w{ InverseProperty AllSubproperty }
  }
  
  # Load metadata ontology.
  
  m_name = ENV['METADATA']
  m_file = File.open(m_name)
  raise "couldn't open metadata ontology #{m_name}" unless m_file
  metadata = JSON.parse(m_file.read)
  raise "couldn't load metadata ontology" unless metadata

  # Create graph structures.

  graphs = metadata['nodes'].inject({}) do |m, n|
    m[n['iri']] = OMFGraph.new(n['iri'], n['filename'], n['provenance'])
    m
  end
  
  metadata.terminology_graphs.values.each do |g|
    puts g.ontology_iri
  end
  # Find exported terminology graphs.
  
  exported_graphs = graphs.values.select do |g|
    g.provenance == 'OMLExtensionModuleProvenance'
  end
  warn "#{exported_graphs.length} exported graphs"
  exported_graphs.each do |g|
    puts g.ontology_iri
  end
 
  # Find imported terminology graphs.
  
  imported_graphs = graphs.values.select do |g|
    g.provenance == 'OMLBundleModuleProvenance'
  end
  warn "#{imported_graphs.length} imported graphs"
 
  # Set file prefixes and suffixes.
  
  all_graphs = exported_graphs + imported_graphs
    
  # Create location mapping.
  
  location_map = graphs.values.inject({}) do |m, g|
    m[g.ontology_iri] = g.ontology_file_iri
    ENTAILMENTS.keys.each do |k|
      m[g.entailments_iri(k)] = g.entailments_file_iri(k)
    end
    m
  end
  location_map['$(BUNDLE_CLOSURE_IRI)'] = '$(BUNDLE_CLOSURE_FILE_IRI)'
  								
  # Create imports graph.
  
  imports_graph = metadata['edges'].inject(DirectedAcyclicGraph.new(DefaultEdge)) do |memo, edge|
    importing = graphs[edge['importing']]
    imported = graphs[edge['imported']]
    unless imported.provenance == 'OMLBuiltinModuleProvenance'
      memo.addVertex(importing)						  
      memo.addVertex(imported)
      memo.addEdge(importing, imported)
    end
    memo
  end
  TransitiveClosure::INSTANCE.closeSimpleDirectedGraph(imports_graph)
												      
  # Create imports map.
									
  imports_map = Hash.new { |h, k| h[k] = Set.new }
  iter = imports_graph.iterator
  while iter.hasNext
    source = iter.next
    imports_map[source] = imports_graph.edgesOf(source).map do |e|
      imports_graph.getEdgeTarget(e)
    end.reject do |target|
      target == source
    end
  end

  # Find root nodes of imports graph that correspond to exported packages.
  
  root_nodes = imports_graph.vertexSet.select do |node|
    imports_graph.inDegreeOf(node) == 0 &&
    exported_graphs.include?(node)
  end

  # Create rules for validating root ontologies.
  
  validate_roots_test_file_rule = Makefile::Rule.new('$(VALIDATE_ROOTS_TEST_FILE)')
  
  iris = Set.new
  files = Set.new
  root_nodes.each do |n|
    iris << n.ontology_iri
    iris += imports_map[n].map { |o| o.ontology_iri }
    files << n.ontology_file
    files += imports_map[n].map { |o| o.ontology_file }
  end
  validate_roots_test_file_rule.prereqs += files 
  validate_roots_test_file_rule.cmds << "$(call validate_roots,$(VALIDATE_ROOTS_ID),#{iris.to_a.join(' ')})"
  
  # Create rules for calculating entailments.
  
  entailments_top_rule = Makefile::Rule.new('entailments')
  entailments_rules = [entailments_top_rule]
  ENTAILMENTS.each do |type, data|
    exported_graphs.each do |o|
      il = imports_map[o]
      input_iri = o.ontology_iri
      output_iri = o.entailments_iri(type)
      target = o.entailments_file(type)
      entailments_top_rule.prereqs << target
      rule = Makefile::Rule.new(target)
      rule.prereqs << o.ontology_file
      entailments_rules << rule
      il.each do |i|
        rule.prereqs << i.ontology_file
        unless i.ontology_iri == PROJECT_BUNDLE_IRI
          rule.prereqs << i.entailments_file(type)
        end
      end
      rule.cmds << %Q{$(call do_entailments,#{input_iri},#{output_iri},"#{data.join(' ')}")}
    end
  end
  
  # Create rules for ontology views.
  
  view_graphs = { 'named' => exported_graphs, 'imported' => imported_graphs }
  
  views = view_graphs.keys.inject([]) do |m, k|
    s = OpenStruct.new
    s.key = k
    s.graphs = view_graphs[k]
    s.iri = 'http://' + '$(VIEW_STEM)' + k
    s.sentinel = '$(SENTINELS_DIR)' + '/' + '$(VIEW_STEM)' + k
    m << s
  end

  views_top_rule = Makefile::Rule.new('create-views')
  views_rules = [views_top_rule]
  views.each do |view|
    views_top_rule.prereqs << view.sentinel
    views_rules << rule = Makefile::Rule.new(view.sentinel)
    rule.prereqs += view.graphs.inject([]) do |m, g|
      m << g.ontology_sentinel
      unless g.ontology_iri == PROJECT_BUNDLE_IRI
        m += ENTAILMENTS.keys.map { |t| g.entailments_sentinel(t) }
      end
      m
    end
    iris = view.graphs.inject([]) do |m, g|
      m << g.ontology_iri
      unless g.ontology_iri == PROJECT_BUNDLE_IRI
        m += ENTAILMENTS.keys.map { |t| g.entailments_iri(t) }
      end
      m
    end
    rule.cmds << %Q{$(call do_view,#{view.iri},#{iris.join(' ')})}
  end
%>

#
# location mapping file
#
# The location mapping file is a YAML file that maps ontology IRIs to file IRIs. It is used by the OWL
# API for ontology loading and retrieval.
#

.PHONY:	location-mapping

location-mapping: $(LOCATION_MAPPING_FILE)

<%=
  rule = Makefile::Rule.new('$(LOCATION_MAPPING_FILE)')
  rule.prereqs << 'Makefile'
  rule.cmds << "@echo '->' $@"
  rule.cmds << '@ > $@'
  rule.cmds += location_map.to_yaml.each_line.inject([]) { |m, o| m << "@echo '#{o.strip}' >> $@"; m }
  rule
%>

#
# rules to extract imported ontologies
#

define do_extract
  @echo extract '->' $@
  @mkdir -p $(dir $@) $(dir $(2))
  @$(EXTRACT) $(EXTRACT_OPTS) $(1) > $(call tmpfile,$@) && mv $(call tmpfile,$@) $@
  @> $(2)
endef

<%=
  rules = []
  imported_graphs.each do |g|
    rules << (rule = Makefile::Rule.new(g.ontology_file))
    rule.cmds << "$(call do_extract,#{g.ontology_iri},#{g.ontology_sentinel})"
    unless g.ontology_iri == PROJECT_BUNDLE_IRI
      ENTAILMENTS.keys.each do |t|
        rules << (rule = Makefile::Rule.new(g.entailments_file(t)))
        rule.cmds << "$(call do_extract,#{g.entailments_iri(t)},#{g.entailments_sentinel(t)})"
      end
    end
  end
  rules.join("\n")
%>

#
# validate-roots
#

define validate_roots
  @echo validate '->' $@
  @mkdir -p $(dir $@)
  @$(VALIDATE_OWL) $(VALIDATE_OWL_OPTS) --id $(1) $(2) > $@
endef

.PHONY: validate-roots

validate-roots:	$(VALIDATE_ROOTS_TEST_FILE)

<%= validate_roots_test_file_rule %>

#
# entailments
#

.PHONY:	entailments

define do_entailments
  @echo entail '->' $@
  @mkdir -p $(dir $@)
  @$(ENTAIL) $(ENTAIL_OPTS) --input-iri $(1) --output-iri $(2) --types $(3) $(4) $^ > $(call tmpfile,$@) && mv $(call tmpfile,$@) $@
endef

<%= entailments_rules.map { |r| r.to_s }.join("\n") %>

#
# load-production
#

define do_load
  @echo load $(5) '->' $(2) $(4)
  @mkdir -p $(dir $@)
  @$(JRUBY_CMD) $(LOAD_REPO) $(LOAD_REPO_OPTS) --uri '$(1)' '$(2)' && touch $@
endef

load-production:	load-ontologies-production

.PHONY: load-ontologies-production

<%=
  rule = Rule.new('load-ontologies-production')
  graph_rules = []
  imports_map.keys.each do |g|
    rule.prereqs << g.ontology_sentinel
    graph_rules << graph_rule = Rule.new(g.ontology_sentinel)
    graph_rule.prereqs << g.ontology_file
    graph_rule.cmds << "$(call do_load,#{g.ontology_iri},#{g.ontology_file})"
  end
  rule.to_s + graph_rules.join
%>

load-production:	load-entailments-production

.PHONY: load-entailments-production

<%=
  rule = Rule.new('load-entailments-production')
  graph_rules = []
  imports_map.keys.each do |g|
    unless g.ontology_iri == PROJECT_BUNDLE_IRI
      ENTAILMENTS.keys.each do |type|
        rule.prereqs << g.entailments_sentinel(type)
        graph_rules << graph_rule = Rule.new(g.entailments_sentinel(type))
        graph_rule.prereqs << g.entailments_file(type)
        graph_rule.cmds << "$(call do_load,#{g.entailments_iri(type)},#{g.entailments_file(type)})"
      end
    end
  end
  rule.to_s + graph_rules.join
%>

#
# create-views
#

load-production: create-views

.PHONY: create-views

define do_view
  @echo create view '->' $@
  @mkdir -p $(dir $@)
  @$(CREATE_VIEW) $(CREATE_VIEW_OPTS) $(1) $(2) > $(call tmpfile,$@) && mv $(call tmpfile,$@) $@
endef

<%=
  views_rules.join
%>

#
# run-audits
#

.PHONY: run-audits

run-audits:	$(AUDITS_TEST_FILE)

define do_audit
  @echo audit '->' $@
  @mkdir -p $(dir $@)
  @$(RUN_AUDITS) $(RUN_AUDITS_OPTS) $(1) $(2) > $(call tmpfile,$@) && mv $(call tmpfile,$@) $@
endef

<%=
  rule = Rule.new('$(AUDITS_TEST_FILE)')
  iris = []
  exported_graphs.each do |g|
    iris << g.ontology_iri
    rule.prereqs << g.ontology_sentinel
    rule.prereqs += imports_map[g].map { |i| i.ontology_sentinel }
    rule.prereqs += views.map { |v| v.sentinel }
    unless g.ontology_iri == PROJECT_BUNDLE_IRI
      ENTAILMENTS.keys.each do |type|
        rule.prereqs << g.entailments_sentinel(type)
        rule.prereqs += imports_map[g].reject { |i| i.ontology_iri == PROJECT_BUNDLE_IRI}.map { |i| i.entailments_sentinel(type) }
      end
    end
  end
  rule.cmds << "$(call do_audit,--audit-tree $(AUDITS_TREE),#{iris.join(' ')})"
  rule
%>

#
# run-reports
#

.PHONY: run-reports

run-reports:	$(REPORTS_TEST_FILE)

define do_report
  @echo report '->' $@
  @mkdir -p $(dir $@)
  @$(RUN_REPORTS) $(RUN_REPORTS_OPTS) $(1) $(2) > $(call tmpfile,$@) && mv $(call tmpfile,$@) $@
endef

<%=
  rule = Rule.new('$(REPORTS_TEST_FILE)')
  iris = []
  exported_graphs.each do |g|
    iris << g.ontology_iri
    rule.prereqs << g.ontology_sentinel
    rule.prereqs += imports_map[g].map { |i| i.ontology_sentinel }
    rule.prereqs += views.map { |v| v.sentinel }
    ENTAILMENTS.keys.each do |type|
      rule.prereqs << g.entailments_sentinel(type)
      rule.prereqs += imports_map[g].reject { |i| i.ontology_iri == PROJECT_BUNDLE_IRI}.map { |i| i.entailments_sentinel(type) }
    end
  end
  rule.cmds << "$(call do_report,--audit-tree $(REPORTS_TREE),#{iris.join(' ')})"
  rule
%>

#
# identify-unsats
#

.PHONY: identify-unsats

define do_identify_unsats
  @echo identify-unsats '->' $@
  @$(JRUBY_CMD) $(GET_UNSATS) $(GET_UNSAT_IRIS_OPTS) $< | \
  	$(JRUBY_CMD) $(IRI_TO_MDID) $(IRI_TO_MDID_OPTS) --metadata <%= ENV['METADATA'] %> \
  	--provenance $(PROVENANCE_FILE) > $(call tmpfile,$@) && mv $(call tmpfile,$@) $@
endef

identify-unsats: $(UNSATS_REPORT_FILE)

$(UNSATS_REPORT_FILE): $(VALIDATE_ROOTS_TEST_FILE)
	$(call do_identify_unsats)
	
#
# identify-unsat-props
#

.PHONY: identify-unsat-props

define do_identify_unsat_props
  @echo identify-unsat-props '->' $@
  @$(JRUBY_CMD) $(GET_UNSATS) $(GET_UNSAT_PROPS_OPTS) $< | \
  	$(JRUBY_CMD) $(IRI_TO_MDID) $(IRI_TO_MDID_OPTS) --metadata <%= ENV['METADATA'] %> \
  	--provenance $(PROVENANCE_FILE) > $(call tmpfile,$@) && mv $(call tmpfile,$@) $@
endef

identify-unsat-props: $(UNSAT_PROPS_REPORT_FILE)

$(UNSAT_PROPS_REPORT_FILE): $(VALIDATE_ROOTS_TEST_FILE)
	$(call do_identify_unsat_props)
	
#
# identify-unsat-prop-sources
#

.PHONY: identify-unsat-prop-sources

define do_identify_unsat_prop_sources
  @echo identify-unsat-prop-sources '->' $@
  @$(JRUBY_CMD) $(GET_UNSATS) $(GET_UNSAT_PROP_SOURCES_OPTS) $< | \
  	$(JRUBY_CMD) $(IRI_TO_MDID) $(IRI_TO_MDID_OPTS) --metadata <%= ENV['METADATA'] %> \
  	--provenance $(PROVENANCE_FILE) > $(call tmpfile,$@) && mv $(call tmpfile,$@) $@
endef

identify-unsat-prop-sources: $(UNSAT_PROP_SOURCES_REPORT_FILE)

$(UNSAT_PROP_SOURCES_REPORT_FILE): $(VALIDATE_ROOTS_TEST_FILE)
	$(call do_identify_unsat_prop_sources)
	
#
# identify-unsat-prop-targets
#

.PHONY: identify-unsat-prop-targets

define do_identify_unsat_prop_targets
  @echo identify-unsat-prop-targets '->' $@
  @$(JRUBY_CMD) $(GET_UNSATS) $(GET_UNSAT_PROP_TARGETS_OPTS) $< | \
  	$(JRUBY_CMD) $(IRI_TO_MDID) $(IRI_TO_MDID_OPTS) --metadata <%= ENV['METADATA'] %> \
  	--provenance $(PROVENANCE_FILE) > $(call tmpfile,$@) && mv $(call tmpfile,$@) $@
endef

identify-unsat-prop-targets: $(UNSAT_PROP_TARGETS_REPORT_FILE)

$(UNSAT_PROP_TARGETS_REPORT_FILE): $(VALIDATE_ROOTS_TEST_FILE)
	$(call do_identify_unsat_prop_targets)
	
#
# identify-unsat-sups
#

.PHONY: identify-unsat-sups

define do_identify_unsat_sups
  @echo identify-unsat-sups '->' $@
  @$(JRUBY_CMD) $(GET_UNSATS) $(GET_UNSAT_SUPS_OPTS) $< | \
  	$(JRUBY_CMD) $(IRI_TO_MDID) $(IRI_TO_MDID_OPTS) --metadata <%= ENV['METADATA'] %> \
  	--provenance $(PROVENANCE_FILE) > $(call tmpfile,$@) && mv $(call tmpfile,$@) $@
endef

identify-unsat-sups: $(UNSAT_SUPS_REPORT_FILE)

$(UNSAT_SUPS_REPORT_FILE): $(VALIDATE_ROOTS_TEST_FILE)
	$(call do_identify_unsat_sups)
	
#
# identify-unsat-roots
#

.PHONY: identify-unsat-roots

define do_identify_unsat_roots
  @echo identify-unsat-roots '->' $@
  @$(JRUBY_CMD) $(GET_UNSAT_ROOTS) $(GET_UNSAT_ROOTS_OPTS) $< | \
  	$(JRUBY_CMD) $(IRI_TO_MDID) $(IRI_TO_MDID_OPTS) --metadata <%= ENV['METADATA'] %> \
  	--provenance $(PROVENANCE_FILE) > $(call tmpfile,$@) && mv $(call tmpfile,$@) $@
endef

identify-unsat-roots: $(UNSAT_ROOTS_REPORT_FILE)

$(UNSAT_ROOTS_REPORT_FILE): $(VALIDATE_ROOTS_TEST_FILE)
	$(call do_identify_unsat_roots)
	
#
# identify-unsat-func-props
#

.PHONY: identify-unsat-func-props

define do_identify_unsat_func_props
  @echo identify-unsat-func-props '->' $@
  @$(JRUBY_CMD) $(GET_UNSATS) $(GET_UNSAT_FUNC_PROPS_OPTS) $< | \
  	$(JRUBY_CMD) $(IRI_TO_MDID) $(IRI_TO_MDID_OPTS) --metadata <%= ENV['METADATA'] %> \
  	--provenance $(PROVENANCE_FILE) > $(call tmpfile,$@) && mv $(call tmpfile,$@) $@
endef

identify-unsat-func-props: $(UNSAT_FUNC_PROPS_REPORT_FILE)

$(UNSAT_FUNC_PROPS_REPORT_FILE): $(VALIDATE_ROOTS_TEST_FILE)
	$(call do_identify_unsat_func_props)
	
#
# Makefile
#

Makefile: Makefile.erb <%= ENV['METADATA'] %>
	@make -f Makefile.bootstrap $@ METADATA=<%= ENV['METADATA'] %>

#
# clean
#

.PHONY: clean

clean:
	@rm -rf $(ARTIFACTS_DIR) $(LOCATION_MAPPING_FILE) $(TESTS_DIR) $(AUDITS_DIR)
